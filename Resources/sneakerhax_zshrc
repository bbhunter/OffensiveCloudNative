############
# Homebrew #
############

# Add shorcut for brew update
bupd(){brew update}
bupg(){brew upgrade}
bcupg(){brew upgrade --cask}
bcle(){brew cleanup -s}
barm(){brew autoremove}
bdoc(){brew doctor}
bdep(){brew deps --tree --installed}
ball(){bupd && bupg && bcle && barm && bdoc}

#######
# Zsh #
####### 

# zsh custom prompt
PROMPT='ðŸ¦‘%F{red}%n%F{white}@%m%~ %F{red}$%F{white} '

# zsh auto completion
autoload -Uz compinit
fpath=(~/.zsh/completion $fpath)
compinit -i

##########
# Python #
##########

# Start Python HTTP server
pyserver(){python3 -m http.server $1}

######
# Go #
######

# Add gopath and gobin path to PATH
export GOPATH="$HOME/go"
export PATH="$GOPATH/bin:$PATH"

##############
# Networking #
##############

# show ip address of en0
show_ip(){ifconfig | grep -A 3 en0 | grep -w inet | cut -d " " -f2}

# get ip address of en0 and copy to clipboard
get_ip(){ifconfig | grep -A 3 en0 | grep -w inet | cut -d " " -f2 | tr -d '\n'| pbcopy}

# show public ip address
show_pub_ip(){curl -s ifconfig.me}

# get public ip address and copy to clipboard
get_pub_ip(){curl -s ifconfig.me | pbcopy}

#########
# Files #
#########

# display file sizes human-readable
file_size(){ls -hl}

# Shortcut to list files with details
alias ll="ls -la"

#######
# Git #
#######

# update SecLists repo
update_seclists(){git -C ~/Code/Repos/SecLists pull}

########
# Nmap #
########

# Nmap nse search function
nse(){ find /opt/homebrew/Cellar/nmap/7.94_1/share/nmap/scripts -iname "*$1*" | cut -d '/' -f10 | cut -d "." -f1;}

# Nmap quick scan
nmap_quick(){nmap -Pn --open -p 21,22,80,443,445,8080 $1}

# Nmap vulners scan
nmap_vuln_scan(){nmap -Pn --open -sV --script=vulners $1}

# Nmap Kubernets scan
nmap_kubernetes_scan(){
cat <<EOF
###################
# Kubernetes scan #
###################

Port 80/tcp - http Kubernetes
Port 443/tcp - https Kubernetes
Port 2379/tcp - etcd service
Port 2746/tcp - Argo Workflows
Port 4040/tcp - Weave Scope
Port 4149/tcp - kubelet (cAdvisor)
Port 5000/tcp - http kube-registry-proxy
Port 5001/tcp - https kube-registry-proxy
Port 6443/tcp - Kubernetes API server
Port 8001/tcp - Kubernetes dashboard
Port 8080/tcp - Kubeflow
Port 8443/tcp - Kubernetes Nginx ingress controller, Apache NiFi
Port 9099/tcp - calico-felix health check server
Port 10250/tcp - kubelet API full node access
Port 10255/tcp - kubelet Unauthenticated read-only port
Port 10256/tcp - kube-proxy
Port 30000-32767/tcp - NodePort

EOF
nmap -Pn --open -sV --script=http-title -p 80,443,4040,4149,5000,5001,6443,8001,8080,8443,9099,10250,10255,10256,30000-32767 $1
}

# Nmap Docker Engine API scan
nmap_docker_engine_scan(){
cat << EOF
##########################
# Docker Engine API scan #
##########################

Port 2375/tcp - Unencrypted Docker Engine port
Port 2376/tcp - Encrypted Docker Engine port
Port 4243/tcp - Docker rest API over HTTP
Port 4244/tcp - Docker Swarm API (now integrated into Docker API)

EOF
nmap -Pn --open -sV --script=http-title -p 2375,2376,4243,4244 $1
}

# Print out the nmap-services top ports 
nmap_top_ports(){grep -v '^#' /opt/homebrew/Cellar/nmap/7.95/share/nmap/nmap-services | sort -r -k3 | head -n $1}

# Print out the nmap-services top ports (clean)
nmap_top_ports_clean() {
    grep -v '^#' /opt/homebrew/Cellar/nmap/7.95/share/nmap/nmap-services | \
    sort -r -k3 | \
    awk '{
        comment = "";
        for (i=4; i<=NF; i++) comment = comment $i " ";
        printf "%-15s %-10s %-10s %s\n", $1, $2, $3, comment
    }' | head -n $1
}

##########
# Docker #
##########

# Start Docker Desktop
start_docker_desktop(){open /Applications/Docker.app}

# Start Docker python3 interactive session
docker_python(){docker run -it python:3}

# Start Docker Kali linux interatactive session
docker_kali(){docker run -it kalilinux/kali-rolling}

# Start Docker Metasploit interactive session
docker_metasploit(){docker run -it sneakerhax/metasploit}

# Run Docker nmap-small on a target (ideal for devices with low-memory)
docker_nmap(){docker run -it sneakerhax/nmap-small --unprivileged $1}

# Run Docker nmap-small quick scan
docker_nmap_quick(){docker run -it sneakerhax/nmap-small --unprivileged -Pn --open -p 21,22,80,443,445,8080 $1}

# Run Docker nmap-small vulners scan
docker_nmap_vuln_scan(){docker run -it sneakerhax/nmap-small --unprivileged -Pn --open -sV --script=vulners $1}

# Run Docker nmap-small Kubernetes scan
docker_nmap_kubernetes_scan(){docker run -it sneakerhax/nmap-small --unprivileged -Pn --open -sV --script=http-title -p 80,443,4149,5000,5001,6443,8001,8443,9099,10250,10255,10256 $1}

# Run Docker nmap-small Docker engine scan
docker_nmap_docker_engine_scan(){docker run -it sneakerhax/nmap-small --unprivileged -Pn --open -sV --script=http-title -p 2375,2376,4243,4244 $1}

# Run Docker dnsx interactive session
docker_dnsx(){docker run --entrypoint sh -it projectdiscovery/dnsx:latest}

# Run Docker subfinder interactive session
docker_subfinder(){docker run --entrypoint sh -it projectdiscovery/subfinder:latest}

# Run Docker httpx interactive session
docker_httpx(){docker run --entrypoint sh -it projectdiscovery/httpx:latest}

# Execute interactive session in Docker container (sh)
docker_exec_container_sh(){docker exec -it $1 sh}

# Execute interactive session in Docker container (bash)
docker_exec_container_bash(){docker exec -it $1 bash}

#######
# ssh #
#######


# Start ssh socks proxy on port 9999
ssh_proxy(){ssh -D 9999 $1}

##############
# Kubernetes #
##############

# load kubectl autocompletion
source <(kubectl completion zsh)

alias k="kubectl"

#############
# Passwords #
#############

# Generate random password of different lengths
rando_pass20(){pwgen -s -1 20}
rando_pass16(){pwgen -s -1 16}
rando_pass12(){pwgen -s -1 12}
rando_pass8(){pwgen -s -1 8}

###########
# Clam AV #
###########

# Run clam av scan
run_av(){freshclam && clamscan}
